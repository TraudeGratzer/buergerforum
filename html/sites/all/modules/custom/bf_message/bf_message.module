<?php

//Includes.
module_load_include('inc', 'bf_message', 'views/handlers/views_handler_field_pm_author');
module_load_include('inc', 'bf_message', 'views/handlers/views_handler_field_pm_timestamp');
module_load_include('inc', 'bf_message', 'views/handlers/views_handler_field_pm_recipient');

// Defines.
define('USER_BLOCKED_MESSAGE_ERROR', t('User blocked'));
define('FIELD_REQUIRED_MESSAGE_ERROR', t('To field is required.'));

/**
 * Implements hook_views_api().
 */
function bf_message_views_api() {
  return array(
    'api'           => 3,
    'path'          => drupal_get_path('module', 'bf_message') . '/views',
    'template path' => drupal_get_path('module', 'bf_message') . '/views',
  );
}

/**
 *  Implementation of hook_form_FORM_ID_alter.
 */
function bf_message_form_privatemsg_new_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][] = 'bf_message_form_privatemsg_new_submit';
  $form['send_copy'] = array(
    '#type'  => 'checkbox',
    '#title' => t('Send me message copy')
  );

  $form['#validate'][] = 'bf_message_form_privatemsg_validate';
}

/**
 * Implementation of privatemsg_new validate handler.
 */
function bf_message_form_privatemsg_validate($form, &$form_state) {

  if (isset($form_state['build_info']['args'][0]) && $account = user_load($form_state['build_info']['args'][0])) {
    if (!$account->status) {
      if (isset($_SESSION['messages']['error'][0]) && $_SESSION['messages']['error'][0] == t(FIELD_REQUIRED_MESSAGE_ERROR)) {
        if (isset($_SESSION['messages']['error'][1])) {
          unset($_SESSION['messages']['error'][1]);
        }
        else {
          $_SESSION['messages']['error'][0] = USER_BLOCKED_MESSAGE_ERROR;
        }
        return FALSE;
      }
    }
  }

  return TRUE;
}

/**
 * Implementation of privatemsg_new submit handler.
 */
function bf_message_form_privatemsg_new_submit(&$form, &$form_state) {
  if (!empty($form_state['values']['author']->uid)) {
    $recipient = user_load_by_name($form_state['values']['recipient']);
    $subject = empty($form_state['values']['subject']) ? '' : $form_state['values']['subject'];
    $body = empty($form_state['values']['body']['value']) ? '' : $form_state['values']['body']['value'];
    rules_invoke_event('new_message_created_send', $form_state['values']['author'], $recipient, $body, $subject);
    if (!empty($form_state['values']['send_copy'])) {
      rules_invoke_event('new_message_created', $form_state['values']['author'], $recipient, $body, $subject);
    }

    $mids = array();
    $query = db_select('pm_message', 'pm')
      ->fields('pm')
      ->condition('pm.author', $form_state['values']['author']->uid)
      ->execute();
    foreach ($query as $row) {
      $mids[] = $row->mid;
    }

    bf_message_increase_message_counter($form_state['values']['author']->uid);
    if (!empty($mids)) {

      // Remove message.
      /* db_delete('pm_index')
         ->condition('mid', $mids, 'IN')
         ->execute();
       db_delete('pm_message')
         ->condition('mid', $mids, 'IN')
         ->execute();*/

      global $user;
      db_delete('pm_index')
        ->condition('recipient', $user->uid, '=')
        ->execute();
      // Set empty body and subject message.
      db_update('pm_message')
        ->fields(array(
          'subject' => '',
          'body'    => '',
        ))
        ->condition('mid', $mids, 'IN')
        ->execute();
    }
  }
}

/**
 * Implementation of hook_rules_event_info().
 * @ingroup rules
 */
function bf_message_rules_event_info() {
  return array(
    'new_message_created'      => array(
      'label'     => t('New message created - send copy'),
      'module'    => 'bf_message',
      'group'     => t('BF'),
      'variables' => array(
        'sender'    => array('type' => 'user', 'label' => t('User, who created message.')),
        'recipient' => array('type' => 'user', 'label' => t('Recipient')),
        'message'   => array('type' => 'text', 'label' => t('Message body.')),
        'subject'   => array('type' => 'text', 'label' => t('Message subject.')),
      ),
    ),
    'new_message_created_send' => array(
      'label'     => t('New message created'),
      'module'    => 'bf_message',
      'group'     => t('BF'),
      'variables' => array(
        'sender'    => array('type' => 'user', 'label' => t('User, who created message.')),
        'recipient' => array('type' => 'user', 'label' => t('Recipient')),
        'message'   => array('type' => 'text', 'label' => t('Message body.')),
        'subject'   => array('type' => 'text', 'label' => t('Message subject.')),
      ),
    ),
  );
}

/**
 * Increase message counter in user's profile.
 */
function bf_message_increase_message_counter($uid) {
  $user = user_load($uid, TRUE);
  if (empty($user)) {
    return FALSE;
  }
  $messages = empty($user->field_message_count[LANGUAGE_NONE][0]['value']) ? 0 : $user->field_message_count[LANGUAGE_NONE][0]['value'];
  $edit = array(
    'uid' => $uid,
  );
  $edit['field_message_count'][LANGUAGE_NONE][0]['value'] = $messages + 1;
  user_save($user, $edit);
  return TRUE;
}

/**
 * Implementation of hook_form_FORM_ID_alter.
 */
function bf_message_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  $form['#attached']['css']['.form-item-pm-send-notifications {display:none!important;}'] = array('type' => 'inline');
}
